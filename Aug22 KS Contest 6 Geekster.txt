Print largest even number in array

Take n as an integer input.
Then declare an array of size n which stores n integer elements.
Then you will be given n integer elements, store these elements in the array starting from the 0th index.
Print the largest even number in the array.
If there is no even number then print -1.

Input Format
In the first line, n will given as an integer input,
Then n integer elements will be given in n separate lines.

Constraints
1<=n<=200
-20000<=Each integer element in the array<=20000

Output Format
Print the largest even number in the array.

Sample Input 0
5
10
20
3
5
100

Sample Output 0
100

Solution Program:-
import java.io.*;
import java.util.*;
public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        Scanner sc =new Scanner(System.in);
        int n = sc.nextInt();
        int arr[]= new int[n]; 
        
        for(int i=0;i<n;i++)
        {
            arr [i]=sc.nextInt();
        }
        
        int largest = Integer.MIN_VALUE;
        for (int number : arr){
        
        if (number % 2 == n) {
            continue;
        }

        if (number > largest) {
            
            largest = number;
        }
    }
    System.out.println(largest);
    }
    
}


Check if Array1 reverse of Array2

Take n as an integer.
Then declare an array name array1 of size n which stores n integer elements.
Then you will be given n integer elements, store these elements in the array1 starting from the 0th index.
Then declare an array name array2 of size n which stores n integer elements.
Then you will be given n integer elements, store these elements in the array2 starting from the 0th index.
Print "true" if array1 is the reverse of array2.
Note: array1 is the reverse of the array2 means =>

    Element at the 0th index of the array1 is equal to the Element at the last index of the array2
    Element at the 1st index of the array1 is equal to the Element at the second last index of the array2
    Element at the 2nd index of the array1 is equal to the Element at the third last index of the array2
.
.
.

and like this you will traverse the complete array1 and print "true" if array1 is the reverse of array2 and print "false" otherwise.
Input Format
In the first line, n will given as an integer input,
Then n integer elements to be stored inside array1 will be given in n separate lines,
Then n integer elements to be stored inside array1 will be given in n separate lines,

Constraints
1<=n<=200
-2^31<=Each integer element in the array<=2^31-1

Output Format
Print "true" or "false" accordingly.

Sample Input 0
3
10
20
30
30
20
10

Sample Output 0
true

Explanation 0
array1={10,20,30}
array2={30,20,10}

0th index of array1 is equal to the 2nd index of array2 1st index of array1 is equal
to the 1st index of array2 2nd index of array1 is equal to the 0th index of array2
Hence, array1 is the reverse of array2.

Sample Input 1
4
10
20
30
40
40
30
100
10

Sample Output 1
false

Explanation 1
array1={10,20,30,40}
array2={40,30,100,10}

Since element at the 1st index of array1 is not equal to the element at the 2nd index of array2, 
so we array1 is not the reverse of array2 and so print the output "false"

Solution Program:-
import java.io.*;
import java.util.*;
public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        Scanner sc =new Scanner(System.in);
        int n = sc.nextInt();
        int [] arr1= new int[n];
        int [] arr2= new int[n]; 
        boolean check = true;
        
        int a,b;
        for (a=0;a<arr1.length;a++)
        {
        for (b=arr2.length-1;b>=0;b=b-1)
        {
                  if (arr1[a] != arr2[b])
                      check=false;
      }
    }
    System.out.println(check);
}
    
}


We define the following:

A subarray of an n-element array is an array composed from a contiguous block of the original array's elements. For example, if array=[1,2,3], then the subarrays are
[1],[2],[3],[1,2],[2,3]and[1,2,3].Something like [1,3] would not be a subarray as it's not a contiguous subsection of the original array.
The sum of an array is the total sum of its elements.
        An array's sum is negative if the total sum of its elements is negative.
        An array's sum is positive if the total sum of its elements is positive.

Given an array of n integers, find and print its number of negative subarrays on a new line.

Input Format

The first line contains a single integer,n, denoting the length of array A=[a0,a1,..an-1] .
The second line contains space-separated integers describing each respective element, ai, in array A.


Constraints
1<=n<=100
-10^4<=ai<=10^4

Output Format
Print the number of subarrays of A having negative sums.

Sample Input
5
1 -2 4 -5 1

Sample Output
9
Explanation
There are nine negative subarrays of A=[1,-4,-5,1]:
[1:1]=-2
[3:3]=-3
[0:-1]=1+-2=-1
[2:3]=4+-5=-1
[3:4]=-5+1=-4
[1:3]==2+4+-5=-3
[0:3]=1-2+4+-5=-2
[1:4]=-2+4+-5+1=-2
[0:4]=1+-2+4+-5+1=-1
Thus, we print 9 on a new line.

Solution Program:-
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        int n,sum=0,c=0;
        Scanner sc = new Scanner(System.in);
        n = sc.nextInt();
        int[] a = new int[n];
        for(int i=0;i<n;i++)
        {
            a[i] = sc.nextInt();
        }
        for(int i=0;i<n;i++)
        {
            for(int j=i;j<n;j++)
            {
                sum = 0;
                for(int k=i;k<=j;k++)
                {
                    sum+=a[k];
                   
                }
                 if(sum<0)c++;
            }
        }
        System.out.print(c);
    }
    
}